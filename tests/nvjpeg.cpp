// NOTE: no full samples for this library seem to exist yet, this is a minimal
// repro of functionality, not intended to be representative of the
// functionality of nvJPEG, just a test to make sure things actually work.

#include <nvjpeg.h>
#include <cstring>
#include <iostream>

nvjpegStatus_t code = NVJPEG_STATUS_SUCCESS;

#define CHECK(func) \
    code = func; \
    if (code != NVJPEG_STATUS_SUCCESS) { \
        std::cerr << "Non-zero status code of " << code \
                  << " on line " << __LINE__ << '\n'; \
        return 1; \
    }

// a jpeg image resized to tiny (16x10) and exported with bin2c
unsigned char imageBytes[] = {
0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x00,0x00,0x01,
0x00,0x01,0x00,0x00,0xff,0xdb,0x00,0x43,0x00,0x03,0x02,0x02,0x02,0x02,0x02,0x03,
0x02,0x02,0x02,0x03,0x03,0x03,0x03,0x04,0x06,0x04,0x04,0x04,0x04,0x04,0x08,0x06,
0x06,0x05,0x06,0x09,0x08,0x0a,0x0a,0x09,0x08,0x09,0x09,0x0a,0x0c,0x0f,0x0c,0x0a,
0x0b,0x0e,0x0b,0x09,0x09,0x0d,0x11,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x10,0x0a,0x0c,
0x12,0x13,0x12,0x10,0x13,0x0f,0x10,0x10,0x10,0xff,0xdb,0x00,0x43,0x01,0x03,0x03,
0x03,0x04,0x03,0x04,0x08,0x04,0x04,0x08,0x10,0x0b,0x09,0x0b,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0xff,0xc0,
0x00,0x11,0x08,0x00,0x0a,0x00,0x10,0x03,0x01,0x22,0x00,0x02,0x11,0x01,0x03,0x11,
0x01,0xff,0xc4,0x00,0x15,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x06,0xff,0xc4,0x00,0x25,0x10,0x00,0x02,0x01,
0x03,0x02,0x06,0x03,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x03,
0x04,0x05,0x11,0x06,0x07,0x00,0x12,0x13,0x21,0x22,0x23,0x08,0x16,0x31,0x71,0xff,
0xc4,0x00,0x15,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x06,0x07,0xff,0xc4,0x00,0x1b,0x11,0x00,0x02,0x03,0x00,0x03,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x04,0x00,0x02,0x03,
0x11,0x12,0xd1,0xff,0xda,0x00,0x0c,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3f,
0x00,0x3f,0xf8,0xad,0xaa,0x77,0x23,0x6b,0x37,0x0f,0xea,0xd7,0x4d,0x2d,0x55,0x65,
0xbc,0xc3,0x4f,0x0b,0xdd,0x22,0xab,0x78,0x56,0x9d,0xad,0x02,0x50,0x26,0x95,0xe5,
0x2d,0x81,0xd2,0xe6,0xca,0xe1,0xb3,0x9f,0x12,0x09,0xc6,0x24,0x77,0xa7,0x51,0xde,
0xf7,0x1a,0xfd,0x75,0xb9,0xeb,0x0d,0x53,0x37,0x4a,0xae,0xa6,0x46,0x45,0xa5,0x52,
0xab,0x57,0x4c,0x18,0x88,0x42,0x36,0x49,0x58,0x82,0x8c,0xe0,0x02,0x58,0x9e,0x62,
0x71,0xca,0x38,0x25,0x4f,0x7e,0xa7,0x86,0x39,0xbd,0x89,0x25,0x7c,0x28,0xea,0xdd,
0xc3,0x29,0x3d,0xc1,0x07,0xf4,0x1e,0x12,0x77,0x61,0x9a,0x1a,0xb4,0x30,0xb1,0x8c,
0xfa,0xd7,0xc4,0xe3,0xc4,0x46,0x70,0x3f,0x83,0x82,0x19,0x31,0x56,0x9e,0xcf,0x4b,
0x50,0x02,0x41,0xf6,0x53,0xb4,0x50,0x2a,0x96,0xbd,0x6d,0xc9,0x04,0x4f,0xff,0xd9
};

// currently using c++14, no std::size :/
static constexpr auto img_size = sizeof(imageBytes) / sizeof(imageBytes[0]);

int main(void) {
    // create handle nvJpeg library handle
    nvjpegHandle_t handle;
    CHECK(nvjpegCreate(NVJPEG_BACKEND_DEFAULT, nullptr, &handle));

    // create jpeg state
    nvjpegJpegState_t jpeg_handle;
    CHECK(nvjpegJpegStateCreate(handle, &jpeg_handle));

    // see if we can get width and height back, no idea what sizes of these are
    // actually supposed to be, 4 seems to make sense for RGBA?
    int widths[] = {0, 0, 0, 0};
    int heights[] = {0, 0, 0, 0};
    int nComponents[] = {0, 0, 0, 0};
    nvjpegChromaSubsampling_t subsampling;
    CHECK(nvjpegGetImageInfo(
        handle,
        imageBytes,
        img_size,
        nComponents,
        &subsampling,
        widths,
        heights
    ));

    // We're done with nvjpeg now
    CHECK(nvjpegJpegStateDestroy(jpeg_handle));
    CHECK(nvjpegDestroy(handle));

    // NOTE: author of this code has no idea what is actually going on, just
    // printed the values like so
    int w0 = widths[0], w1 = widths[1], w2 = widths[2], w3 = widths[3];
    int h0 = heights[0], h1 = heights[1], h2 = heights[2], h3 = heights[3];
    std::cout << "Widths:  {" << w0 << ", " << w1 << ", " << w2 << ", " << w3 << "}\n"
              << "Heights: {" << h0 << ", " << h1 << ", " << h2 << ", " << h3 << "}\n";
    if (w0 == 16 && w1 == 8 && w2 == 8 && w3 == 0 &&
        h0 == 10 && h1 == 5 && h2 == 5 && h3 == 0)
        return 0;
    else
        return 1;
}
